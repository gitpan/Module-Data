use strict;
use warnings;

use Test::More;

# FILENAME: 03_fake_system.t
# CREATED: 26/03/12 13:28:04 by Kent Fredric (kentnl) <kentfredric@gmail.com>
# ABSTRACT: Simulate a Fake Installed System and test no-require features

use Test::Fatal;
use Module::Data;
use FindBin;
use Path::Class qw( dir );

my $tlib = dir($FindBin::RealBin)->subdir('03_t');

# Load All modules we really need early to stop @INC messes.

require File::Spec;
require Try::Tiny;
require Scalar::Util;
require Data::Dump;
require Carp;
require Path::ScanINC;
require Module::Runtime;

my $realinc = {%INC};
my $newinc  = {};

# Simulates an empty %INC somewhat.
for my $lib (qw( overload warnings Module::Runtime )) {
	my $nn = Module::Runtime::module_notional_filename($lib);
	$newinc->{$nn} = $realinc->{$nn};
}

{
	local @INC;
	local %INC;
	%INC = ( %{$newinc} );

	@INC = (
		$tlib->subdir('lib/site_perl/VERSION/ARCH-linux')->stringify, $tlib->subdir('lib/site_perl/VERSION')->stringify,
		$tlib->subdir('lib/VERSION/ARCH-linux')->stringify,           $tlib->subdir('lib/VERSION')->stringify,
	);

	my @mods;
	for my $mod (qw( Test::A Test::B Test::C Test::D )) {
		is(
			exception {
				push @mods, Module::Data->new($mod);
			},
			undef,
			"Making MD for $mod works"
		);
	}
	for my $mod (qw( Test::A Test::B Test::C Test::D )) {
		my $key = Module::Runtime::module_notional_filename($mod);
		is( $INC{$key}, undef, "Module $mod wasn't loaded into global context" );
	}

}

done_testing;

